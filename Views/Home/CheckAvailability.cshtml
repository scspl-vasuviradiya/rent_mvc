@{
    ViewData["Title"] = "Check Availability";
    var product = ViewBag.Product as ClothesRental.Models.ViewModels.ProductViewModel;
    var unavailableDates = ViewBag.UnavailableDates as List<DateTime>;
    var nextAvailableDate = ViewBag.NextAvailableDate as DateTime?;
    var selectedDate = ViewBag.SelectedDate as DateTime?;
}

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Select Rental Dates</h2>
                <div class="d-flex align-items-center mb-3">
                    <img src="@product.ImageUrl" alt="@product.Name" class="rounded me-3" style="width: 60px; height: 60px; object-fit: cover;">
                    <div>
                        <h5 class="mb-1">@product.Name</h5>
                        <p class="text-muted mb-0">$@product.PricePerDay/day</p>
                    </div>
                </div>
                
                <form id="bookingForm" asp-controller="Bookings" asp-action="Create" method="get">
                    <input type="hidden" name="productId" value="@product.Id" />
                    
                    <div class="mb-3">
                        <label for="startDate" class="form-label">Start Date</label>
                        <input type="date" class="form-control" id="startDate" name="startDate" 
                               value="@(selectedDate?.ToString("yyyy-MM-dd") ?? DateTime.Today.AddDays(1).ToString("yyyy-MM-dd"))" 
                               min="@DateTime.Today.ToString("yyyy-MM-dd")" required />
                    </div>
                    
                    <div class="mb-3">
                        <label for="endDate" class="form-label">End Date</label>
                        <input type="date" class="form-control" id="endDate" name="endDate" 
                               value="@DateTime.Today.AddDays(2).ToString("yyyy-MM-dd")" 
                               min="@DateTime.Today.AddDays(1).ToString("yyyy-MM-dd")" required />
                    </div>
                    
                    <div id="priceCalculation" class="bg-light p-3 rounded mb-3" style="display: none;">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Duration:</span>
                            <span id="totalDays">0 days</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Price per day:</span>
                            <span>$@product.PricePerDay</span>
                        </div>
                        <div class="d-flex justify-content-between border-top pt-2">
                            <strong>Total:</strong>
                            <strong id="totalPrice" class="text-primary">$0</strong>
                        </div>
                    </div>
                    
                    <div id="availabilityMessage" class="alert" style="display: none;"></div>
                    
                    <button type="submit" id="continueBtn" class="btn btn-primary w-100" disabled>
                        <i class="fas fa-calendar me-1"></i>Continue to Booking
                    </button>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Current Status</h5>
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span>Status:</span>
                        <span class="badge bg-@product.StatusColor">@product.StatusText</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span>Price per day:</span>
                        <span class="fw-bold text-primary">$@product.PricePerDay</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span>Washing time:</span>
                        <span>@product.WashingDays days</span>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Next available:</span>
                        <span class="text-success">
                            @if (nextAvailableDate.HasValue)
                            {
                                @(nextAvailableDate.Value.Date == DateTime.Today ? "Today" : nextAvailableDate.Value.ToString("MMM dd, yyyy"))
                            }
                            else
                            {
                                <text>Today</text>
                            }
                        </span>
                    </div>
                </div>
                
                <h6 class="card-title">Unavailable Dates</h6>
                @if (unavailableDates != null && unavailableDates.Any())
                {
                    <div class="row">
                        @foreach (var date in unavailableDates.Take(10))
                        {
                            <div class="col-6 mb-1">
                                <small class="badge bg-danger">@date.ToString("MMM dd")</small>
                            </div>
                        }
                        @if (unavailableDates.Count > 10)
                        {
                            <div class="col-12">
                                <small class="text-muted">+@(unavailableDates.Count - 10) more dates</small>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-success small">No unavailable dates in the next 30 days</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    $(document).ready(function() {
        const productId = @product.Id;
        const pricePerDay = @product.PricePerDay;
        
        function updateCalculation() {
            const startDate = $('#startDate').val();
            const endDate = $('#endDate').val();
            
            if (startDate && endDate) {
                const start = new Date(startDate);
                const end = new Date(endDate);
                
                if (end > start) {
                    const totalDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
                    const totalPrice = totalDays * pricePerDay;
                    
                    $('#totalDays').text(totalDays + ' days');
                    $('#totalPrice').text('$' + totalPrice.toFixed(2));
                    $('#priceCalculation').show();
                    
                    // Check availability
                    checkAvailability(productId, startDate, endDate);
                } else {
                    $('#priceCalculation').hide();
                    $('#continueBtn').prop('disabled', true);
                }
            }
        }
        
        function checkAvailability(productId, startDate, endDate) {
            $.post('@Url.Action("CheckDatesAvailability", "Home")', {
                productId: productId,
                startDate: startDate,
                endDate: endDate
            }, function(data) {
                if (data.available) {
                    $('#availabilityMessage')
                        .removeClass('alert-danger')
                        .addClass('alert-success')
                        .text('✓ Dates Available - These dates have been verified as available')
                        .show();
                    $('#continueBtn').prop('disabled', false);
                } else {
                    $('#availabilityMessage')
                        .removeClass('alert-success')
                        .addClass('alert-danger')
                        .text('✗ Dates Not Available - Please select different dates')
                        .show();
                    $('#continueBtn').prop('disabled', true);
                }
            });
        }
        
        $('#startDate, #endDate').on('change', updateCalculation);
        
        // Update end date minimum when start date changes
        $('#startDate').on('change', function() {
            const startDate = $(this).val();
            if (startDate) {
                const minEndDate = new Date(startDate);
                minEndDate.setDate(minEndDate.getDate() + 1);
                $('#endDate').attr('min', minEndDate.toISOString().split('T')[0]);
            }
        });
        
        // Initial calculation
        updateCalculation();
    });
</script>
}